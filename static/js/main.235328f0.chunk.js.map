{"version":3,"sources":["coloursArray.js","App.js","reportWebVitals.js","index.js"],"names":["COLOURS","App","quotesURL","useState","quote","setQuote","author","setAuthor","randomNumber","setRandomNumber","quotesArray","setQuotesArray","accentColour","setAccentColour","fetchQuotes","url","a","fetch","response","json","parsedJSON","quotes","console","log","useEffect","className","style","backgroundColor","color","transitionDuration","id","target","href","encodeURI","icon","faTwitter","onClick","randomInteger","Math","floor","random","length","randomColourIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAWiBA,G,MAXD,CAAC,UAAW,UAAW,UAAW,UAAW,UACzD,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,Y,uBC6CjCC,MAhDf,WACE,IAAMC,EAAY,yIAElB,EAA0BC,mBAAS,wCAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,iBAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwCJ,mBAAS,KAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAsCN,mBAAS,MAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAAwCR,mBAAS,WAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KAEMC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAEOA,EAASC,OAFhB,OAEZC,EAFY,OAGlBT,EAAeS,EAAWC,QAC1BC,QAAQC,IAAIb,GAJM,2CAAH,sDAoBjB,OAbAc,qBAAU,WACRV,EAAYZ,KACX,CAACA,IAYF,qBAAKuB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAaC,MAAO,CAACC,gBAAgB,GAAD,OAAKf,GAAgBgB,MAAM,GAAD,OAAKhB,GAAgBiB,mBAAoB,QAAzH,SACE,sBAAKC,GAAG,YAAR,UACE,oBAAGA,GAAG,OAAOJ,MAAO,CAACG,mBAAoB,QAAzC,cAAoDzB,EAApD,OACA,oBAAG0B,GAAG,SAASJ,MAAO,CAACG,mBAAoB,QAA3C,eAAuDvB,KACvD,sBAAKmB,UAAU,UAAf,UACE,mBAAGK,GAAG,cAAcJ,MAAO,CAACC,gBAAgB,GAAD,OAAKf,GAAgBiB,mBAAoB,QAASE,OAAO,SAASC,KAC5GC,UAAU,4CAAD,OAA6C7B,EAA7C,aAAuDE,IAAhE,mBADD,SAEC,cAAC,IAAD,CAAiBwB,GAAG,eAAeI,KAAMC,QAC1C,wBAAQL,GAAG,YAAYJ,MAAO,CAACC,gBAAgB,GAAD,OAAKf,GAAgBiB,mBAAoB,QAASO,QAnBtF,WAClB,IAAIC,EAAgBC,KAAKC,MAAMD,KAAKE,SAAS9B,EAAY+B,QACrDC,EAAoBJ,KAAKC,MAAMD,KAAKE,SAASxC,EAAQyC,QACzDhC,EAAgB4B,GAChBxB,EAAgBb,EAAQ0C,IACxBrC,EAASK,EAAYF,GAAcJ,OACnCG,EAAUG,EAAYF,GAAcF,SAa5B,kCCjCGqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.235328f0.chunk.js","sourcesContent":["const COLOURS = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \r\n\t\t  '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n\t\t  '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n\t\t  '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n\t\t  '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n\t\t  '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n\t\t  '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n\t\t  '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n\t\t  '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n\t\t  '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\r\n\r\n  export default COLOURS","import { useEffect, useState } from 'react';\r\nimport './App.scss';\r\nimport COLOURS from './coloursArray';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\r\n\r\nfunction App() {\r\n  const quotesURL = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\r\n\r\n  const [quote, setQuote] = useState('The best revenge is massive success.')\r\n  const [author, setAuthor] = useState('Frank Sinatra')\r\n  const [randomNumber, setRandomNumber] = useState('0')\r\n  const [quotesArray, setQuotesArray] = useState(null)\r\n  const [accentColour, setAccentColour] = useState('#F39C12')\r\n\r\n  const fetchQuotes = async (url) => {\r\n    const response = await fetch(url)\r\n    const parsedJSON = await response.json()\r\n    setQuotesArray(parsedJSON.quotes)\r\n    console.log(quotesArray)\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchQuotes(quotesURL)\r\n  }, [quotesURL])\r\n\r\n  const switchQuote = () => {\r\n    let randomInteger = Math.floor(Math.random()*quotesArray.length)\r\n    let randomColourIndex = Math.floor(Math.random()*COLOURS.length)\r\n    setRandomNumber(randomInteger)\r\n    setAccentColour(COLOURS[randomColourIndex])\r\n    setQuote(quotesArray[randomNumber].quote)\r\n    setAuthor(quotesArray[randomNumber].author)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\" style={{backgroundColor: `${accentColour}`, color: `${accentColour}`, transitionDuration: '1.5s'}}>\r\n        <div id='quote-box'>\r\n          <p id='text' style={{transitionDuration: '1.5s'}}>\"{quote}\"</p>\r\n          <p id='author' style={{transitionDuration: '1.5s'}}>- {author}</p>\r\n          <div className='buttons'>\r\n            <a id='tweet-quote' style={{backgroundColor: `${accentColour}`, transitionDuration: '1.5s'}} target='_blank' href=\r\n            {encodeURI(`http://www.twitter.com/intent/tweet?text=${quote} -${author}`)+`&hashtags=quotes`}\r\n            ><FontAwesomeIcon id='twitter-icon' icon={faTwitter}></FontAwesomeIcon></a>\r\n            <button id='new-quote' style={{backgroundColor: `${accentColour}`, transitionDuration: '1.5s'}} onClick={switchQuote}>New quote</button>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}